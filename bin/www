#!/usr/bin/env node

const app = require('../app')
const debug = require('debug')('GithubDatasetAPI:server')
const http = require('http')

// global.app = app
// global.http = http
// const repl = require('repl')
// repl.start({ prompt: 'server > ', useGlobal: true })

const port = normalizePort(8000)
app.set('port', port)

const server = http.createServer(app)

async function start () {
  server.on('error', onError)
  server.on('listening', onListening)
  await app.init()
  server.listen(port)
}

start()

function normalizePort (val) {
  const port = parseInt(val, 10)
  // named pipe
  if (isNaN(port)) { return val }
  // port number
  if (port >= 0) { return port }
  return false
}

// HTTP Server Events
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
